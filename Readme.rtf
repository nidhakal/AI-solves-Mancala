{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red9\green9\blue9;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\csgenericrgb\c3529\c3529\c3529;
}
\margl1440\margr1440\vieww25100\viewh15700\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Project from: Rayyan and Nipurna \
Part1:\
For the first part of this assignment, there were a lot of constraints that we had to make sure we were considering while simultaneously carrying out the player's move. We made a single list of the entire Mancala board with the zero-index representing the Minimum player's Mancala, 1-6 carrying the pits of the Max player's side and then 7 being the Max player's Mancala. Finally, 8-13 were indexes of the Min player's pits.\'a0\
\cb1 \
\cb3 This made looping around the board easier by just doing (mod 14). We had an index customized to mark the right index on the board based on the integer of the move and on whose turn it was. We then set the value of the pit to 0. We then simply increase the index, having a condition checking if we were in the opponent's Mancala - and if so, we skip that step, otherwise, we carry on adding a single pebble to each pit and reducing the value of our stored integer - number of pebbles.\'a0\
\cb1 \
\cb3 Now comes the tricky part of conditions. If we have a single pebble left, our conditions start. First, we check to see if it is landing on an empty pit on the side of the player who's turn it is and if so, we check if the opposite pit is also filled and then transfer the contents of both to the player with the turn's Mancala. Otherwise, we check if the next pit is the Mancala of the player and if so give him back the turn again. If none of this is the case, we proceed as normal changing the turn of the player.\'a0\
\cb1 \
\cb3 At the start, we store the value of who's turn it is in 'turn_holder' and then use it at the end to determine if the final state was reached. If it is, all the stone in the opponent's pit go to their Mancala and then this is a final state.\'a0\
\cb1 \
\cb3 For 'legal_moves' we checked if the pit on the side of the player wasn't empty and added it to the list of legal_moves.\'a0\
\cb1 \
\cb3 The 'to_move' and 'max_to_move' were relatively easier as we had stored the turn in our state and just had to retrieve it.\'a0\
\cb1 \
\cb3 For the utility function, we just had to submit the difference between the Mancala's based on who's turn it was. The display function was up to how each person interpreted it best. We organized and displayed it based on indexes and the values of the Mancala's\
\cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
Part 2:\
We noticed that the a player doesnot get a re-chance as explained in the assignment if the last pebble reaches their mancala, so to make the players have a second chance we edited the code in play_game2 by creating a while loop which lopps until the state of the to move function is with the same player. We also created a dictonary names results which the name of the player and the value of the utilities. \
To file mancala we added an evaluation function that calculated the number of pebbles each of the players have in their holes and utilities value of the players, and returned the difference between their sums. \
\
Part 3:\
We copied the test1 to our porject file and chenged it to mancala from ticttac toe, we changed the players 0 and X to Min and Max, and also changed play_game to play game2. We changed the test4 so that it can be played with \cf4 alphabeta_player2 with our evaluation function and a random player. And we created another test(test5) which included depths as an argument, which can be played with us and a alphabeta_player2 player with our evaluation function. We also used pandas data frame to create a table for the results of the average wins and utility difference.}